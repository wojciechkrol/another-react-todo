{"version":3,"sources":["store/todos/actions.js","containers/TodoForm.js","containers/AddTodo.js","store/filter/actions.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","components/Link.js","containers/FilterLink.js","components/Filter.js","containers/FilterList.js","App.js","serviceWorker.js","store/todos/reducer.js","store/filter/reducer.js","store/reducers.js","index.js"],"names":["todoID","Actions","TodoForm","state","name","handleInputChange","event","target","value","type","checked","_this","setState","Object","defineProperty","onSubmit","preventDefault","todo","props","onChangeTodo","id","onAddTodo","prevProps","this","text","_this$props","rest","objectWithoutProperties","react_default","a","createElement","InputGroup","FormControl","onChange","placeholder","Append","Button","React","Component","connect","_ref","todos","find","edit","dispatch","payload","changeTodo","addTodo","Filters","Todo","onTodoClick","onTodoEdit","onTodoRemove","completed","ListGroup","Item","variant","Row","Col","className","FormCheck","label","onClick","TodoList","length","map","index","components_Todo","assign","key","getTodoList","filter","Error","concat","toggleTodo","editTodo","removeTodo","Link","as","active","children","Tag","e","Filter","filters","DropdownButton","keys","FilterLink","Dropdown","_filters","title","App","Container","style","marginTop","md","span","offset","Card","Header","Body","AddTodo","FilterList","size","VisibleTodoList","Footer","href","Boolean","window","location","hostname","match","arguments","undefined","action","toConsumableArray","objectSpread","combineReducers","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68dd3c3f.chunk.js","sourcesContent":["let todoID = 1;\n\nexport const Actions = {\n  ADD_TODO: \"ADD_TODO\",\n  TOGGLE_TODO: \"TOGGLE_TODO\",\n  REMOVE_TODO: \"REMOVE_TODO\",\n  CHANGE_TODO: \"CHANGE_TODO\",\n  EDIT_TODO: \"EDIT_TODO\",\n};\n\nexport const addTodo = text => ({\n  type: Actions.ADD_TODO,\n  payload: {\n    id: todoID++,\n    text,\n  },\n});\n\nexport const toggleTodo = id => ({\n  type: Actions.TOGGLE_TODO,\n  payload: {\n    id,\n  },\n});\n\nexport const removeTodo = id => ({\n  type: Actions.REMOVE_TODO,\n  payload: {\n    id,\n  },\n});\n\nexport const changeTodo = (id, text) => ({\n  type: Actions.CHANGE_TODO,\n  payload: {\n    id,\n    text,\n  },\n});\n\nexport const editTodo = id => ({\n  type: Actions.EDIT_TODO,\n  payload: {\n    id,\n  },\n});\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { InputGroup, FormControl, Button } from \"react-bootstrap\";\nimport { changeTodo } from \"../store/todos/actions\";\n\nclass TodoForm extends React.Component {\n  state = {\n    name: \"\",\n  };\n\n  handleInputChange = event => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  onSubmit = event => {\n    event.preventDefault();\n\n    const { todo } = this.props;\n\n    if (this.state.name) {\n      if (todo !== null) {\n        this.props.onChangeTodo(todo.id, this.state.name);\n      } else {\n        this.props.onAddTodo(this.state.name);\n      }\n    }\n\n    this.setState({\n      name: \"\",\n    });\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.todo !== this.props.todo && this.props.todo !== null) {\n      this.setState({\n        name: this.props.todo.text,\n      });\n    }\n  }\n\n  render() {\n    const { onAddTodo, todo, onChangeTodo, ...rest } = this.props;\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        <InputGroup {...rest}>\n          <FormControl\n            name=\"name\"\n            value={this.state.name}\n            onChange={this.handleInputChange}\n            placeholder=\"Your task name...\"\n          />\n          <InputGroup.Append>\n            <Button type=\"submit\">{todo !== null ? \"Edit\" : \"Add\"}</Button>\n          </InputGroup.Append>\n        </InputGroup>\n      </form>\n    );\n  }\n}\n\nTodoForm.propTypes = {\n  onAddTodo: PropTypes.func.isRequired,\n  todo: PropTypes.any,\n};\n\nconst mapStateToProps = ({ todos }) => ({\n  todo:\n    todos.find(todo => {\n      return todo.edit === true;\n    }) || null,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeTodo: (id, text) => dispatch(changeTodo(id, text)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TodoForm);\n","import { connect } from \"react-redux\";\nimport TodoForm from \"../containers/TodoForm\";\nimport { addTodo } from \"../store/todos/actions\";\n\nconst mapDispatchToProps = dispatch => ({\n  onAddTodo: text => dispatch(addTodo(text)),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(TodoForm);\n","export const Actions = {\n  ADD_TODO: \"ADD_TODO\",\n  SET_FILTER: \"SET_FILTER\",\n  TOGGLE_TODO: \"TOGGLE_TODO\",\n};\n\nexport const Filters = {\n  SHOW_ALL: \"SHOW_ALL\",\n  SHOW_COMPLETED: \"SHOW_COMPLETED\",\n  SHOW_ACTIVE: \"SHOW_ACTIVE\",\n};\n\nexport const setFilter = filter => ({\n  type: Actions.SET_FILTER,\n  payload: {\n    filter,\n  },\n});\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ListGroup, FormCheck, Row, Col, Button } from \"react-bootstrap\";\n\nconst Todo = ({ onTodoClick, onTodoEdit, onTodoRemove, completed, text }) => {\n  return (\n    <ListGroup.Item variant={completed ? \"success\" : \"\"}>\n      <Row>\n        <Col className=\"col-auto mr-auto\">\n          <FormCheck\n            type=\"checkbox\"\n            checked={completed}\n            onChange={onTodoClick}\n            label={text}\n          />\n        </Col>\n        <Col className=\"col-auto\">\n          <Button variant=\"link\" className=\"py-0\" onClick={onTodoEdit}>\n            Edit\n          </Button>\n\n          <Button\n            variant=\"link\"\n            className=\"py-0 text-danger\"\n            onClick={onTodoRemove}\n          >\n            Remove\n          </Button>\n        </Col>\n      </Row>\n    </ListGroup.Item>\n  );\n};\n\nTodo.propTypes = {\n  onTodoClick: PropTypes.func.isRequired,\n  onTodoEdit: PropTypes.func.isRequired,\n  onTodoRemove: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default Todo;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Todo from \"./Todo\";\nimport { ListGroup } from \"react-bootstrap\";\n\nconst TodoList = ({ todos, ...props }) => {\n  return (\n    <ListGroup>\n      {todos.length > 0 ? (\n        todos.map((todo, index) => (\n          <Todo\n            key={index}\n            {...todo}\n            onTodoClick={() => props.onTodoClick(todo.id)}\n            onTodoEdit={() => props.onTodoEdit(todo.id)}\n            onTodoRemove={() => props.onTodoRemove(todo.id)}\n          />\n        ))\n      ) : (\n        <ListGroup.Item variant=\"primary\">List is empty.</ListGroup.Item>\n      )}\n    </ListGroup>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      text: PropTypes.string.isRequired,\n    }),\n  ),\n  onTodoClick: PropTypes.func.isRequired,\n  onTodoEdit: PropTypes.func.isRequired,\n  onTodoRemove: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import { connect } from \"react-redux\";\nimport { toggleTodo, editTodo, removeTodo } from \"../store/todos/actions\";\nimport { Filters } from \"../store/filter/actions\";\nimport TodoList from \"../components/TodoList\";\n\nconst getTodoList = (todos, filter) => {\n  switch (filter) {\n    case Filters.SHOW_ALL:\n      return todos;\n    case Filters.SHOW_COMPLETED:\n      return todos.filter(todo => todo.completed === true);\n    case Filters.SHOW_ACTIVE:\n      return todos.filter(todo => todo.completed === false);\n    default:\n      throw new Error(`Unknown filter: ${filter}`);\n  }\n};\n\nconst mapStateToProps = state => ({\n  todos: getTodoList(state.todos, state.filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTodoClick: id => dispatch(toggleTodo(id)),\n  onTodoEdit: id => dispatch(editTodo(id)),\n  onTodoRemove: id => dispatch(removeTodo(id)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TodoList);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Link = ({ as, active, children, onClick }) => {\n  const Tag = as || \"a\";\n\n  return (\n    <Tag\n      onClick={e => {\n        e.preventDefault();\n        onClick();\n      }}\n      active={active}\n    >\n      {children}\n    </Tag>\n  );\n};\n\nLink.propTypes = {\n  active: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  onClick: PropTypes.func.isRequired,\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n};\n\nexport default Link;\n","import { connect } from \"react-redux\";\nimport { setFilter } from \"../store/filter/actions\";\nimport Link from \"../components/Link\";\n\nconst mapStateToProps = (state, props) => ({\n  active: state.filter === props.filter,\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  onClick: () => dispatch(setFilter(props.filter)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Link);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport FilterLink from \"../containers/FilterLink\";\nimport { DropdownButton, Dropdown } from \"react-bootstrap\";\n\nconst Filter = props => {\n  const { filters, ...rest } = props;\n\n  return (\n    <DropdownButton {...rest}>\n      {Object.keys(filters).map((key, index) => (\n        <FilterLink key={index} as={Dropdown.Item} filter={key}>\n          {filters[key]}\n        </FilterLink>\n      ))}\n    </DropdownButton>\n  );\n};\n\nFilter.propTypes = {\n  filters: PropTypes.object.isRequired,\n};\n\nexport default Filter;\n","import { connect } from \"react-redux\";\nimport { Filters } from \"../store/filter/actions\";\nimport Filter from \"../components/Filter\";\n\nconst filters = {\n  [Filters.SHOW_ALL]: \"All\",\n  [Filters.SHOW_ACTIVE]: \"Active\",\n  [Filters.SHOW_COMPLETED]: \"Completed\",\n};\n\nconst mapStateToProps = ({ filter }) => ({\n  filters,\n  title: `Filter: ${filters[filter]}`,\n});\n\nexport default connect(\n  mapStateToProps,\n  {},\n)(Filter);\n","import \"react-bootstrap\";\nimport React, { Component } from \"react\";\nimport AddTodo from \"./containers/AddTodo\";\nimport VisibleTodoList from \"./containers/VisibleTodoList\";\nimport FilterList from \"./containers/FilterList\";\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col style={{ marginTop: 20 }} md={{ span: 6, offset: 3 }}>\n            <Card>\n              <Card.Header as=\"h3\" className=\"text-center\">\n                Another React Todo\n              </Card.Header>\n              <Card.Body>\n                <AddTodo className=\"pb-3\" />\n                <Row>\n                  <Col className=\"col-auto ml-auto mt-2 mb-2\">\n                    <FilterList variant=\"outline-secondary\" size=\"sm\" />\n                  </Col>\n                </Row>\n                <VisibleTodoList />\n              </Card.Body>\n              <Card.Footer as=\"small\" className=\"text-center\">\n                <a href=\"https://github.com/wojciechkrol\">Wojciech Król</a> @\n                2019 | <code>Made while learning React + Redux</code>\n              </Card.Footer>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Actions } from \"./actions\";\n\nconst todos = (state = [], action) => {\n  switch (action.type) {\n    case Actions.ADD_TODO:\n      return [\n        ...state,\n        {\n          ...action.payload,\n          completed: false,\n          edit: false,\n        },\n      ];\n    case Actions.TOGGLE_TODO:\n      return state.map(todo => {\n        if (todo.id === action.payload.id) {\n          return { ...todo, completed: !todo.completed };\n        }\n\n        return todo;\n      });\n    case Actions.REMOVE_TODO:\n      return state.filter(todo => {\n        return todo.id !== action.payload.id;\n      });\n    case Actions.CHANGE_TODO:\n      return state.map(todo => {\n        if (todo.id === action.payload.id) {\n          return { ...todo, text: action.payload.text, edit: false };\n        }\n\n        return todo;\n      });\n    case Actions.EDIT_TODO:\n      return state.map(todo => {\n        if (todo.id === action.payload.id) {\n          return { ...todo, edit: true };\n        }\n\n        return { ...todo, edit: false };\n      });\n    default:\n      return state;\n  }\n};\n\nexport default todos;\n","import { Filters, Actions } from \"./actions\";\n\nconst filter = (state = Filters.SHOW_ALL, action) => {\n  switch (action.type) {\n    case Actions.SET_FILTER:\n      return action.payload.filter;\n    default:\n      return state;\n  }\n};\n\nexport default filter;\n","import { combineReducers } from \"redux\";\nimport todos from \"./todos/reducer\";\nimport filter from \"./filter/reducer\";\n\nexport default combineReducers({\n  todos,\n  filter,\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducers from \"./store/reducers\";\n\nimport \"./index.css\";\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}